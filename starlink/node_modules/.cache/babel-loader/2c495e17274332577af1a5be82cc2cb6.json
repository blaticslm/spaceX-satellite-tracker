{"ast":null,"code":"var _jsxFileName = \"K:\\\\Laioffer\\\\FullStack\\\\SpaceX\\u9879\\u76EE\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL } from \"../constants\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3select } from \"d3-selection\"; // 改select名字\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super(); //create a map ref\n\n    this.generateMap = land => {\n      const geo_projection = geoKavrayskiy7() //返回的是个method,然后定义projection的参数\n      .scale(170).translate([width / 2, height / 2]).precision(0.1);\n      const graticule = geoGraticule(); //经纬度\n      //get map canvas\n      //this.refmap has --> {current:canvas}\n\n      const canvas = d3select(this.refmap.current) //获得地图canvas\n      .attr(\"width\", width).attr(\"height\", height); //now,canvas有projection有，那么开始把数据注入\n      //画图前初始化\n\n      let context = canvas.node().getContext(\"2d\"); //canvas的形式\n\n      let path = geoPath().projection(geo_projection).context(context); //画图\n\n      land.forEach(ele => {\n        context.fillStyle = \"#B3DDEF\"; //填充颜色\n\n        context.strokeStyle = \"#000\"; //边界颜色\n\n        context.globalAlpha = 0.7; //地图深浅\n        //地图本身\n\n        context.beginPath(); //开始画\n\n        path(ele); //把path画出来\n\n        context.fill(); //填充\n\n        context.stroke(); //画笔\n        //经纬度\n\n        context.strokeStyle = 'rgba(220,220,220,0.1)';\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke();\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      });\n    };\n\n    this.refmap = /*#__PURE__*/React.createRef(); //refmap is in WorldMap.js, 初始化\n\n    this.refTrack = /*#__PURE__*/React.createRef(); //第二个图层，透明图层\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refmap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  componentDidMount() {\n    //获取数据时用这个\n    axios.get(WORLD_MAP_URL).then(res => {\n      //console.log(res)\n      if (res.status === 200) {\n        const {\n          data\n        } = res; //feature(data,data.object.countries).features\n        //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\n        //step 1: convert map data to geojson\n\n        const land = feature(data, data.objects.countries).features; //step 2: generate map\n        //geoJson --> projection parameter preparation ---> projected white board --> using D3\n\n        this.generateMap(land);\n      }\n    }).catch(err => {\n      console.log(\"error on fetch map data: \", err);\n    });\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["K:/Laioffer/FullStack/SpaceX项目/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","WORLD_MAP_URL","SATELLITE_POSITION_URL","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3select","width","height","WorldMap","constructor","generateMap","land","geo_projection","scale","translate","precision","graticule","canvas","refmap","current","attr","context","node","getContext","path","projection","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","createRef","refTrack","render","componentDidUpdate","prevProps","prevState","snapshot","componentDidMount","get","then","res","status","data","objects","countries","features","catch","err","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport {WORLD_MAP_URL, SATELLITE_POSITION_URL} from \"../constants\";\r\nimport {feature} from \"topojson-client\"\r\nimport {geoKavrayskiy7} from \"d3-geo-projection\";\r\nimport {geoGraticule, geoPath} from \"d3-geo\";\r\nimport {select as d3select} from \"d3-selection\";// 改select名字\r\n\r\nconst width = 960;\r\nconst height = 600;\r\nclass WorldMap extends Component {\r\n    constructor() {\r\n        super();\r\n        //create a map ref\r\n        this.refmap = React.createRef(); //refmap is in WorldMap.js, 初始化\r\n        this.refTrack = React.createRef(); //第二个图层，透明图层\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" ref={this.refmap}/>\r\n                <canvas className = \"track\" ref = {this.refTrack} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        \r\n    }\r\n\r\n    componentDidMount() { //获取数据时用这个\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                //console.log(res)\r\n                if (res.status === 200) {\r\n                    const{data} = res;\r\n                    //feature(data,data.object.countries).features\r\n                    //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\r\n\r\n                    //step 1: convert map data to geojson\r\n                    const land = feature(data,data.objects.countries).features\r\n\r\n                    //step 2: generate map\r\n                    //geoJson --> projection parameter preparation ---> projected white board --> using D3\r\n                    this.generateMap(land)\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(\"error on fetch map data: \", err)\r\n            })\r\n    }\r\n\r\n    generateMap = land => {\r\n        const geo_projection = geoKavrayskiy7() //返回的是个method,然后定义projection的参数\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(0.1);\r\n\r\n        const graticule = geoGraticule(); //经纬度\r\n\r\n        //get map canvas\r\n        //this.refmap has --> {current:canvas}\r\n        const canvas = d3select(this.refmap.current) //获得地图canvas\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n\r\n\r\n        //now,canvas有projection有，那么开始把数据注入\r\n        //画图前初始化\r\n        let context = canvas.node().getContext(\"2d\"); //canvas的形式\r\n        let path = geoPath()\r\n            .projection(geo_projection)\r\n            .context(context)\r\n\r\n        //画图\r\n        land.forEach(ele => {\r\n            context.fillStyle = \"#B3DDEF\"; //填充颜色\r\n            context.strokeStyle = \"#000\"; //边界颜色\r\n            context.globalAlpha = 0.7; //地图深浅\r\n\r\n            //地图本身\r\n            context.beginPath(); //开始画\r\n            path(ele); //把path画出来\r\n            context.fill(); //填充\r\n            context.stroke(); //画笔\r\n\r\n            //经纬度\r\n            context.strokeStyle = 'rgba(220,220,220,0.1)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        })\r\n    }\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}