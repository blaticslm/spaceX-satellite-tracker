{"ast":null,"code":"var _jsxFileName = \"K:\\\\Laioffer\\\\FullStack\\\\SpaceX\\u9879\\u76EE\\\\starlink\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Row, Col } from \"antd\"; //整体布局是行列式\n\nimport axios from \"axios\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport { SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //状态值， 数据的transfer从SatSetting里传到SetList里。而不是得到satSetting的response传给main再传给satList\n      satInfo: null,\n      settings: null,\n      isLoadingList: false\n    };\n\n    this.showNearbySatellite = setting => {\n      console.log(setting);\n      this.setState({\n        settings: setting\n      }); //fetch sat list from the server\n\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      //step 1: get the settings\n      //step 2: fetch satellite list from the server\n      //  case 1: successful ---> update satInfo\n      //  case 2: fail ---> display error\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude\n      } = setting;\n      const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apikey=${SAT_API_KEY}`;\n      axios.get(url).then(response => {\n        console.log(response);\n      }).catch(err => {\n        console.log(\"error in fetch satellite: \", err);\n      });\n    };\n  }\n\n  //this.showNearbysatellite是子到父传递\n  render() {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"left-side\",\n        span: 8,\n        children: [/*#__PURE__*/_jsxDEV(SatSetting, {\n          onShow: this.showNearbySatellite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SatelliteList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"right-side\",\n        span: 16,\n        children: \"right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["K:/Laioffer/FullStack/SpaceX项目/starlink/src/components/Main.js"],"names":["React","Component","Row","Col","axios","SatSetting","SatelliteList","SAT_API_KEY","NEARBY_SATELLITE","STARLINK_CATEGORY","Main","state","satInfo","settings","isLoadingList","showNearbySatellite","setting","console","log","setState","fetchSatellite","latitude","longitude","elevation","altitude","url","get","then","response","catch","err","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAOC,GAAP,EAAYC,GAAZ,QAAsB,MAAtB,C,CAA8B;;AAC9B,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,WAAR,EAAqBC,gBAArB,EAAuCC,iBAAvC,QAA+D,cAA/D;;;AAEA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBU,KADyB,GACjB;AAAE;AACNC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,QAAQ,EAAE,IAFN;AAGJC,MAAAA,aAAa,EAAE;AAHX,KADiB;;AAAA,SA4BzBC,mBA5ByB,GA4BHC,OAAO,IAAI;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,WAAKG,QAAL,CAAc;AAACN,QAAAA,QAAQ,EAACG;AAAV,OAAd,EAF6B,CAG7B;;AACA,WAAKI,cAAL,CAAoBJ,OAApB;AACH,KAjCwB;;AAAA,SAmCzBI,cAnCyB,GAmCRJ,OAAO,IAAI;AACxB;AACA;AACA;AACA;AAEA,YAAM;AAACK,QAAAA,QAAD;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA,SAAtB;AAAiCC,QAAAA;AAAjC,UAA6CR,OAAnD;AACA,YAAMS,GAAG,GAAI,QAAOjB,gBAAiB,IAAGa,QAAS,IAAGC,SAAU,IAAGC,SAAU,IAAGC,QAAS,IAAGf,iBAAkB,YAAWF,WAAY,EAAnI;AACAH,MAAAA,KAAK,CAACsB,GAAN,CAAUD,GAAV,EACKE,IADL,CACUC,QAAQ,IAAI;AACdX,QAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACH,OAHL,EAIKC,KAJL,CAIWC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CY,GAA1C;AACH,OANL;AAOH,KAlDwB;AAAA;;AAOzB;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI,QAAC,GAAD;AACI,QAAA,SAAS,EAAC,WADd;AAEI,QAAA,IAAI,EAAI,CAFZ;AAAA,gCAII,QAAC,UAAD;AAAY,UAAA,MAAM,EAAI,KAAKhB;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI,QAAC,GAAD;AACI,QAAA,SAAS,EAAC,YADd;AAEI,QAAA,IAAI,EAAI,EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AA1BwB;;AAqD7B,eAAeL,IAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport{Row, Col} from \"antd\"; //整体布局是行列式\r\nimport axios from \"axios\";\r\n\r\nimport SatSetting from \"./SatSetting\";\r\nimport SatelliteList from \"./SatelliteList\";\r\nimport {SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY} from \"../constants\";\r\n\r\nclass Main extends Component {\r\n    state = { //状态值， 数据的transfer从SatSetting里传到SetList里。而不是得到satSetting的response传给main再传给satList\r\n        satInfo: null,\r\n        settings: null,\r\n        isLoadingList: false,\r\n    }\r\n\r\n    //this.showNearbysatellite是子到父传递\r\n    render() {\r\n        return (\r\n            <Row className=\"main\">\r\n                <Col\r\n                    className=\"left-side\"\r\n                    span = {8}\r\n                >\r\n                    <SatSetting onShow = {this.showNearbySatellite}/>\r\n                    <SatelliteList />\r\n                </Col>\r\n                <Col\r\n                    className=\"right-side\"\r\n                    span = {16}\r\n                >\r\n                    right\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    showNearbySatellite = setting => {\r\n        console.log(setting)\r\n        this.setState({settings:setting});\r\n        //fetch sat list from the server\r\n        this.fetchSatellite(setting)\r\n    }\r\n\r\n    fetchSatellite = setting => {\r\n        //step 1: get the settings\r\n        //step 2: fetch satellite list from the server\r\n        //  case 1: successful ---> update satInfo\r\n        //  case 2: fail ---> display error\r\n\r\n        const {latitude, longitude, elevation, altitude} = setting;\r\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apikey=${SAT_API_KEY}`;\r\n        axios.get(url)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(err => {\r\n                console.log(\"error in fetch satellite: \", err)\r\n            })\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}