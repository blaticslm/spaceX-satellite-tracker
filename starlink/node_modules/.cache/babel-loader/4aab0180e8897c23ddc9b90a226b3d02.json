{"ast":null,"code":"import parallel1 from \"./parallel1.js\";\nimport { atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/bonne.js"],"names":["parallel1","atan2","cos","sin","sqrt","tan","sinusoidalRaw","bonneRaw","phi0","cotPhi0","forward","lambda","phi","rho","e","invert","x","y","scale","center","parallel"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,SAAQC,KAAR,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,QAAyC,WAAzC;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,MAAI,CAACA,IAAL,EAAW,OAAOF,aAAP;AACX,MAAIG,OAAO,GAAG,IAAIJ,GAAG,CAACG,IAAD,CAArB;;AAEA,WAASE,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,GAAG,GAAGJ,OAAO,GAAGD,IAAV,GAAiBI,GAA3B;AAAA,QACIE,CAAC,GAAGD,GAAG,GAAGF,MAAM,GAAGT,GAAG,CAACU,GAAD,CAAZ,GAAoBC,GAAvB,GAA6BA,GADxC;AAEA,WAAO,CAACA,GAAG,GAAGV,GAAG,CAACW,CAAD,CAAV,EAAeL,OAAO,GAAGI,GAAG,GAAGX,GAAG,CAACY,CAAD,CAAlC,CAAP;AACD;;AAEDJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIJ,GAAG,GAAGT,IAAI,CAACY,CAAC,GAAGA,CAAJ,GAAQ,CAACC,CAAC,GAAGR,OAAO,GAAGQ,CAAf,IAAoBA,CAA7B,CAAd;AAAA,QACIL,GAAG,GAAGH,OAAO,GAAGD,IAAV,GAAiBK,GAD3B;AAEA,WAAO,CAACA,GAAG,GAAGX,GAAG,CAACU,GAAD,CAAT,GAAiBX,KAAK,CAACe,CAAD,EAAIC,CAAJ,CAAvB,EAA+BL,GAA/B,CAAP;AACD,GAJD;;AAMA,SAAOF,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOV,SAAS,CAACO,QAAD,CAAT,CACFW,KADE,CACI,OADJ,EAEFC,MAFE,CAEK,CAAC,CAAD,EAAI,OAAJ,CAFL,EAGFC,QAHE,CAGO,EAHP,CAAP;AAID","sourcesContent":["import parallel1 from \"./parallel1.js\";\r\nimport {atan2, cos, sin, sqrt, tan} from \"./math.js\";\r\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\r\n\r\nexport function bonneRaw(phi0) {\r\n  if (!phi0) return sinusoidalRaw;\r\n  var cotPhi0 = 1 / tan(phi0);\r\n\r\n  function forward(lambda, phi) {\r\n    var rho = cotPhi0 + phi0 - phi,\r\n        e = rho ? lambda * cos(phi) / rho : rho;\r\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\r\n  }\r\n\r\n  forward.invert = function(x, y) {\r\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\r\n        phi = cotPhi0 + phi0 - rho;\r\n    return [rho / cos(phi) * atan2(x, y), phi];\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\nexport default function() {\r\n  return parallel1(bonneRaw)\r\n      .scale(123.082)\r\n      .center([0, 26.1441])\r\n      .parallel(45);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}