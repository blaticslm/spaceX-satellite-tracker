{"ast":null,"code":"var _jsxFileName = \"K:\\\\Laioffer\\\\FullStack\\\\SpaceX\\u9879\\u76EE\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3select } from \"d3-selection\"; // 改select名字\n\nimport { tickFormat as d3Timeformat } from \"d3-scale\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super(); //create a map ref\n    //画图用。\n\n    this.track = data => {\n      //先查看有没有position这个数据\n      console.log(data);\n\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n      }\n\n      const len = data[0].position.length; //get length of position array\n\n      const {\n        context2\n      } = this.map;\n      const now = new Data(); //定义当前时间\n\n      let i = 0;\n      const timer = setInterval(() => {\n        const ct = new Date(); //为了match 扩大了的时间\n\n        const timePassed = i === 0 ? 0 : ct - now;\n        const time = new Date(now.getTime() + timePassed * 60); //display time: d3 timer\n\n        context2.clearRect(0, 0, width, height); //清除整个区域\n\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n      }, 1000);\n    };\n\n    this.generateMap = land => {\n      const geo_projection = geoKavrayskiy7() //返回的是个method,然后定义projection的参数\n      .scale(170).translate([width / 2, height / 2]).precision(0.1);\n      const graticule = geoGraticule(); //经纬度\n      //get map canvas\n      //this.refmap has --> {current:canvas}\n\n      const canvas = d3select(this.refmap.current) //获得地图canvas\n      .attr(\"width\", width).attr(\"height\", height);\n      const canvas2 = d3select(this.refmap.current) //画卫星轨迹的图层\n      .attr(\"width\", width).attr(\"height\", height); //now,canvas有projection有，那么开始把数据注入\n      //画图前初始化\n\n      let context = canvas.node().getContext(\"2d\"); //canvas的形式\n\n      let context2 = canvas2.node().getContext(\"2d\"); //卫星轨迹画图的图层\n\n      let path = geoPath().projection(geo_projection).context(context); //画图\n\n      land.forEach(ele => {\n        context.fillStyle = \"#B3DDEF\"; //填充颜色\n\n        context.strokeStyle = \"#000\"; //边界颜色\n\n        context.globalAlpha = 0.7; //地图深浅\n        //地图本身\n\n        context.beginPath(); //开始画\n\n        path(ele); //把path画出来\n\n        context.fill(); //填充\n\n        context.stroke(); //画笔\n        //经纬度\n\n        context.strokeStyle = 'rgba(220,220,220,0.1)';\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke();\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      }); //这个目的是转换卫星position数据project到地图上\n\n      this.map = {\n        projection: geo_projection,\n        graticule: graticule,\n        context: context,\n        context2: context2\n      };\n    };\n\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.refmap = /*#__PURE__*/React.createRef(); //refmap is in WorldMap.js, 初始化\n\n    this.refTrack = /*#__PURE__*/React.createRef(); //第二个图层，透明图层\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refmap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //??????????\n    //Sapce 4 start\n    //step 1: fetch all satellite positions\n    //step 2: display all the positions on the map\n    if (prevProps.satData !== this.props.satData) {\n      //如果前一个props的状态和当前的props状态不一样\n      const {\n        //父传子用props，在main里面定义了observerData\n        latitude,\n        longitude,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60; //说是拿duration的时间，实际上是拿该时间60倍的时间\n      //接下来拿卫星数据\n      //urls: [axios.get(url1), .....]\n      //这个map作用是\n      //satId 1: url1, satId 2: url2 ...\n\n      this.setState({\n        isLoading: true\n      });\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        this.setState({\n          isLoading: false\n        });\n        return axios.get(url);\n      }); //连续发送数据请求\n      //console.log(urls)\n\n      Promise.all(urls).then(res => {\n        //遍历array并直接画图\n        const arr = res.map(sat => sat.data); //该处用一个sat名字来代替在data里面的各个卫星的json数据\n\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          //判断是否可以画图\n          this.track(arr);\n        } else {\n          const onHint = document.getElementsByClassName(\"hint\")[0];\n          onHint.innerHTML = \"Please wait for these current satellites to finish drawing! \";\n        }\n      }).catch(err => {\n        console.log(`Error in fetch position ${err}`);\n        this.setState({\n          isLoading: false,\n          isDrawing: false\n        });\n      });\n    }\n  }\n\n  componentDidMount() {\n    //获取数据时用这个\n    axios.get(WORLD_MAP_URL).then(res => {\n      //console.log(res)\n      if (res.status === 200) {\n        const {\n          data\n        } = res; //feature(data,data.object.countries).features\n        //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\n        //step 1: convert map data to geojson\n\n        const land = feature(data, data.objects.countries).features; //step 2: generate map\n        //geoJson --> projection parameter preparation ---> projected white board --> using D3\n\n        this.generateMap(land);\n      }\n    }).catch(err => {\n      console.log(\"error on fetch map data: \", err);\n    });\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["K:/Laioffer/FullStack/SpaceX项目/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3select","tickFormat","d3Timeformat","width","height","WorldMap","constructor","track","data","console","log","hasOwnProperty","Error","len","position","length","context2","map","now","Data","i","timer","setInterval","ct","Date","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","generateMap","land","geo_projection","scale","translate","precision","graticule","canvas","refmap","current","attr","canvas2","context","node","getContext","path","projection","forEach","ele","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","state","isLoading","isDrawing","createRef","refTrack","render","componentDidUpdate","prevProps","prevState","snapshot","satData","props","latitude","longitude","altitude","duration","observerData","endTime","setState","urls","sat","satid","url","get","Promise","all","then","res","arr","onHint","document","getElementsByClassName","innerHTML","catch","err","componentDidMount","status","objects","countries","features"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport {WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY} from \"../constants\";\r\nimport {feature} from \"topojson-client\"\r\nimport {geoKavrayskiy7} from \"d3-geo-projection\";\r\nimport {geoGraticule, geoPath} from \"d3-geo\";\r\nimport {select as d3select} from \"d3-selection\";// 改select名字\r\nimport {tickFormat as d3Timeformat} from \"d3-scale\";\r\n\r\nconst width = 960;\r\nconst height = 600;\r\nclass WorldMap extends Component {\r\n    constructor() {\r\n        super();\r\n        //create a map ref\r\n        //画图用。\r\n        this.state = {\r\n            isLoading:false,\r\n            isDrawing:false,\r\n        }\r\n        this.refmap = React.createRef(); //refmap is in WorldMap.js, 初始化\r\n        this.refTrack = React.createRef(); //第二个图层，透明图层\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" ref={this.refmap}/>\r\n                <canvas className = \"track\" ref = {this.refTrack} />\r\n                <div className=\"hint\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //??????????\r\n        //Sapce 4 start\r\n\r\n        //step 1: fetch all satellite positions\r\n        //step 2: display all the positions on the map\r\n\r\n        if(prevProps.satData !== this.props.satData) { //如果前一个props的状态和当前的props状态不一样\r\n            const { //父传子用props，在main里面定义了observerData\r\n                latitude,\r\n                longitude,\r\n                altitude,\r\n                duration\r\n            } = this.props.observerData;\r\n\r\n            const endTime = duration * 60; //说是拿duration的时间，实际上是拿该时间60倍的时间\r\n\r\n            //接下来拿卫星数据\r\n            //urls: [axios.get(url1), .....]\r\n            //这个map作用是\r\n            //satId 1: url1, satId 2: url2 ...\r\n            this.setState({isLoading:true})\r\n            const urls= this.props.satData.map(sat => {\r\n                const {satid} = sat;\r\n\r\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n                this.setState({\r\n                    isLoading:false\r\n\r\n                })\r\n                return axios.get(url);\r\n            });\r\n\r\n            //连续发送数据请求\r\n            //console.log(urls)\r\n            Promise.all(urls)\r\n                .then(res => {\r\n\r\n                    //遍历array并直接画图\r\n                    const arr = res.map(sat => sat.data) //该处用一个sat名字来代替在data里面的各个卫星的json数据\r\n                    this.setState({isLoading:false, isDrawing:true})\r\n\r\n                    if(!prevState.isDrawing) { //判断是否可以画图\r\n                        this.track(arr)\r\n                    } else {\r\n                        const onHint = document.getElementsByClassName(\"hint\")[0];\r\n                        onHint.innerHTML = \"Please wait for these current satellites to finish drawing! \"\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log(`Error in fetch position ${err}`)\r\n                    this.setState({isLoading:false, isDrawing:false})\r\n                })\r\n        }\r\n    }\r\n\r\n    track = data => {\r\n        //先查看有没有position这个数据\r\n        console.log(data)\r\n        if (!data[0].hasOwnProperty(\"positions\")) {\r\n            throw new Error(\"no position data\");\r\n        }\r\n\r\n        const len = data[0].position.length; //get length of position array\r\n        const {context2} = this.map;\r\n        const now = new Data(); //定义当前时间\r\n\r\n        let i= 0;\r\n\r\n        const timer = setInterval( () => {\r\n            const ct = new Date(); //为了match 扩大了的时间\r\n            const timePassed = i === 0? 0 : ct-now;\r\n            const time = new Date(now.getTime() + timePassed * 60);\r\n\r\n            //display time: d3 timer\r\n            context2.clearRect(0,0,width,height); //清除整个区域\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333\";\r\n            context2.textAlign = \"center\";\r\n\r\n\r\n        }, 1000)\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() { //获取数据时用这个\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                //console.log(res)\r\n                if (res.status === 200) {\r\n                    const{data} = res;\r\n                    //feature(data,data.object.countries).features\r\n                    //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\r\n\r\n                    //step 1: convert map data to geojson\r\n                    const land = feature(data,data.objects.countries).features\r\n\r\n                    //step 2: generate map\r\n                    //geoJson --> projection parameter preparation ---> projected white board --> using D3\r\n                    this.generateMap(land)\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(\"error on fetch map data: \", err)\r\n            })\r\n    }\r\n\r\n    generateMap = land => {\r\n        const geo_projection = geoKavrayskiy7() //返回的是个method,然后定义projection的参数\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(0.1);\r\n\r\n        const graticule = geoGraticule(); //经纬度\r\n\r\n        //get map canvas\r\n        //this.refmap has --> {current:canvas}\r\n        const canvas = d3select(this.refmap.current) //获得地图canvas\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n\r\n        const canvas2 = d3select(this.refmap.current) //画卫星轨迹的图层\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n\r\n\r\n        //now,canvas有projection有，那么开始把数据注入\r\n        //画图前初始化\r\n        let context = canvas.node().getContext(\"2d\"); //canvas的形式\r\n        let context2 = canvas2.node().getContext(\"2d\"); //卫星轨迹画图的图层\r\n\r\n\r\n        let path = geoPath()\r\n            .projection(geo_projection)\r\n            .context(context)\r\n\r\n        //画图\r\n        land.forEach(ele => {\r\n            context.fillStyle = \"#B3DDEF\"; //填充颜色\r\n            context.strokeStyle = \"#000\"; //边界颜色\r\n            context.globalAlpha = 0.7; //地图深浅\r\n\r\n            //地图本身\r\n            context.beginPath(); //开始画\r\n            path(ele); //把path画出来\r\n            context.fill(); //填充\r\n            context.stroke(); //画笔\r\n\r\n            //经纬度\r\n            context.strokeStyle = 'rgba(220,220,220,0.1)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        });\r\n\r\n        //这个目的是转换卫星position数据project到地图上\r\n        this.map = {\r\n            projection:geo_projection,\r\n            graticule: graticule,\r\n            context: context,\r\n            context2: context2\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}