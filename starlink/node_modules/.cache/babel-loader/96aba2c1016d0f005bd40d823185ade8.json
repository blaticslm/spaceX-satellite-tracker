{"ast":null,"code":"var _jsxFileName = \"K:\\\\Laioffer\\\\FullStack\\\\SpaceX\\u9879\\u76EE\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { WORLD_MAP_URL } from \"../constants\";\nimport feature from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule } from \"d3-geo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super(); //create a map ref\n\n    this.generateMap = land => {\n      const geo_projection = geoKavrayskiy7(); //返回的是个method,然后定义projection的参数\n\n      geo_projection.scale(170).translate(width / 2, height / 2).precision(0.1);\n      const graticule = geoGraticule(); //经纬度\n    };\n\n    this.refmap = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidMount() {\n    //获取数据时用这个\n    axios.get(WORLD_MAP_URL).then(res => {\n      //console.log(res)\n      if (status === 200) {\n        const {\n          data\n        } = res; //feature(data,data.object.countries).features\n        //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\n        //step 1: convert map data to geojson\n\n        const land = feature(data, data.objects.countries).features; //step 2: generate map\n        //geoJson --> projection ---> projected white board --> using D3\n\n        this.generateMap(land);\n      }\n    }).catch(err => {\n      console.log(\"error on fetch map data: \", err);\n    });\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["K:/Laioffer/FullStack/SpaceX项目/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","WORLD_MAP_URL","feature","geoKavrayskiy7","geoGraticule","width","height","WorldMap","constructor","generateMap","land","geo_projection","scale","translate","precision","graticule","refmap","createRef","render","componentDidMount","get","then","res","status","data","objects","countries","features","catch","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,QAA4B,cAA5B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,YAAR,QAA2B,QAA3B;;AAEA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AACA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAC7BS,EAAAA,WAAW,GAAG;AACV,YADU,CAEV;;AAFU,SAoCdC,WApCc,GAoCAC,IAAI,IAAI;AAClB,YAAMC,cAAc,GAAGR,cAAc,EAArC,CADkB,CACuB;;AACzCQ,MAAAA,cAAc,CACTC,KADL,CACW,GADX,EAEKC,SAFL,CAEeR,KAAK,GAAG,CAFvB,EAE0BC,MAAM,GAAG,CAFnC,EAGKQ,SAHL,CAGe,GAHf;AAKA,YAAMC,SAAS,GAAGX,YAAY,EAA9B,CAPkB,CAOgB;AACrC,KA5Ca;;AAGV,SAAKY,MAAL,gBAAclB,KAAK,CAACmB,SAAN,EAAd;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAQ,QAAA,SAAS,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAAE;AAClBnB,IAAAA,KAAK,CAACoB,GAAN,CAAUnB,aAAV,EACKoB,IADL,CACUC,GAAG,IAAI;AACT;AACA,UAAIC,MAAM,KAAK,GAAf,EAAoB;AAChB,cAAK;AAACC,UAAAA;AAAD,YAASF,GAAd,CADgB,CAEhB;AACA;AAEA;;AACA,cAAMZ,IAAI,GAAGR,OAAO,CAACsB,IAAD,EAAMA,IAAI,CAACC,OAAL,CAAaC,SAAnB,CAAP,CAAqCC,QAAlD,CANgB,CAQhB;AACA;;AACA,aAAKlB,WAAL,CAAiBC,IAAjB;AAEH;AACJ,KAhBL,EAiBKkB,KAjBL,CAiBWC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC;AACH,KAnBL;AAoBH;;AAnC4B;;AAgDjC,eAAetB,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport {WORLD_MAP_URL} from \"../constants\";\r\nimport feature from \"topojson-client\"\r\nimport {geoKavrayskiy7} from \"d3-geo-projection\";\r\nimport {geoGraticule} from \"d3-geo\";\r\n\r\nconst width = 960;\r\nconst height = 600;\r\nclass WorldMap extends Component {\r\n    constructor() {\r\n        super();\r\n        //create a map ref\r\n        this.refmap = React.createRef();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() { //获取数据时用这个\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                //console.log(res)\r\n                if (status === 200) {\r\n                    const{data} = res;\r\n                    //feature(data,data.object.countries).features\r\n                    //feature(data,data.object.countries)这个部分res的country的部分给拿到手了。接着country这个feature下还有features，这才是我们想要的\r\n\r\n                    //step 1: convert map data to geojson\r\n                    const land = feature(data,data.objects.countries).features\r\n\r\n                    //step 2: generate map\r\n                    //geoJson --> projection ---> projected white board --> using D3\r\n                    this.generateMap(land)\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(\"error on fetch map data: \", err)\r\n            })\r\n    }\r\n\r\n    generateMap = land => {\r\n        const geo_projection = geoKavrayskiy7(); //返回的是个method,然后定义projection的参数\r\n        geo_projection\r\n            .scale(170)\r\n            .translate(width / 2, height / 2)\r\n            .precision(0.1)\r\n\r\n        const graticule = geoGraticule(); //经纬度\r\n    }\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}