{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, pi, sign, sin, sqrt } from \"./math.js\";\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [2 / sqrt(6 * pi) * lambda * alpha, sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)];\n}\n\neckert2Raw.invert = function (x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [x * sqrt(6 * pi) / (2 * alpha), sign(y) * asin((4 - alpha * alpha) / 3)];\n};\n\nexport default function () {\n  return projection(eckert2Raw).scale(165.664);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/eckert2.js"],"names":["geoProjection","projection","abs","asin","pi","sign","sin","sqrt","eckert2Raw","lambda","phi","alpha","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,EAAnB,EAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCC,IAAlC,QAA6C,WAA7C;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiC;AACtC,MAAIC,KAAK,GAAGJ,IAAI,CAAC,IAAI,IAAID,GAAG,CAACJ,GAAG,CAACQ,GAAD,CAAJ,CAAZ,CAAhB;AACA,SAAO,CACL,IAAIH,IAAI,CAAC,IAAIH,EAAL,CAAR,GAAmBK,MAAnB,GAA4BE,KADvB,EAELN,IAAI,CAACK,GAAD,CAAJ,GAAYH,IAAI,CAAC,IAAIH,EAAJ,GAAS,CAAV,CAAhB,IAAgC,IAAIO,KAApC,CAFK,CAAP;AAID;;AAEDH,UAAU,CAACI,MAAX,GAAoB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACjC,MAAIH,KAAK,GAAG,IAAIT,GAAG,CAACY,CAAD,CAAH,GAASP,IAAI,CAAC,IAAIH,EAAJ,GAAS,CAAV,CAA7B;AACA,SAAO,CACLS,CAAC,GAAGN,IAAI,CAAC,IAAIH,EAAL,CAAR,IAAoB,IAAIO,KAAxB,CADK,EAELN,IAAI,CAACS,CAAD,CAAJ,GAAUX,IAAI,CAAC,CAAC,IAAIQ,KAAK,GAAGA,KAAb,IAAsB,CAAvB,CAFT,CAAP;AAID,CAND;;AAQA,eAAe,YAAW;AACxB,SAAOV,UAAU,CAACO,UAAD,CAAV,CACFO,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\r\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math.js\";\r\n\r\nexport function eckert2Raw(lambda, phi) {\r\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\r\n  return [\r\n    2 / sqrt(6 * pi) * lambda * alpha,\r\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\r\n  ];\r\n}\r\n\r\neckert2Raw.invert = function(x, y) {\r\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\r\n  return [\r\n    x * sqrt(6 * pi) / (2 * alpha),\r\n    sign(y) * asin((4 - alpha * alpha) / 3)\r\n  ];\r\n};\r\n\r\nexport default function() {\r\n  return projection(eckert2Raw)\r\n      .scale(165.664);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}