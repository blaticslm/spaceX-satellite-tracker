{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs } from \"./math.js\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nimport { sinuMollweidePhi, sinuMollweideY } from \"./sinuMollweide.js\";\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function (x, y) {\n  return abs(y) > sinuMollweidePhi ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(homolosineRaw).scale(152.63);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/homolosine.js"],"names":["geoProjection","projection","abs","mollweideRaw","sinusoidalRaw","sinuMollweidePhi","sinuMollweideY","homolosineRaw","lambda","phi","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,gBAAR,EAA0BC,cAA1B,QAA+C,oBAA/C;AAEA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoC;AACzC,SAAOP,GAAG,CAACO,GAAD,CAAH,GAAWJ,gBAAX,IACAG,MAAM,GAAGL,YAAY,CAACK,MAAD,EAASC,GAAT,CAArB,EAAoCD,MAAM,CAAC,CAAD,CAAN,IAAaC,GAAG,GAAG,CAAN,GAAUH,cAAV,GAA2B,CAACA,cAA7E,EAA6FE,MAD7F,IAEDJ,aAAa,CAACI,MAAD,EAASC,GAAT,CAFnB;AAGD;;AAEDF,aAAa,CAACG,MAAd,GAAuB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACpC,SAAOV,GAAG,CAACU,CAAD,CAAH,GAASP,gBAAT,GACDF,YAAY,CAACO,MAAb,CAAoBC,CAApB,EAAuBC,CAAC,IAAIA,CAAC,GAAG,CAAJ,GAAQN,cAAR,GAAyB,CAACA,cAA9B,CAAxB,CADC,GAEDF,aAAa,CAACM,MAAd,CAAqBC,CAArB,EAAwBC,CAAxB,CAFN;AAGD,CAJD;;AAMA,eAAe,YAAW;AACxB,SAAOX,UAAU,CAACM,aAAD,CAAV,CACFM,KADE,CACI,MADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\r\nimport {abs} from \"./math.js\";\r\nimport {mollweideRaw} from \"./mollweide.js\";\r\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\r\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide.js\";\r\n\r\nexport function homolosineRaw(lambda, phi) {\r\n  return abs(phi) > sinuMollweidePhi\r\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\r\n      : sinusoidalRaw(lambda, phi);\r\n}\r\n\r\nhomolosineRaw.invert = function(x, y) {\r\n  return abs(y) > sinuMollweidePhi\r\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\r\n      : sinusoidalRaw.invert(x, y);\r\n};\r\n\r\nexport default function() {\r\n  return projection(homolosineRaw)\r\n      .scale(152.63);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}