{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { atan, quarterPi, sin, tan } from \"./math.js\";\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];\n}\n\ntimesRaw.invert = function (x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [x / (0.74482 - 0.34588 * s * s), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(timesRaw).scale(146.153);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/times.js"],"names":["geoProjection","projection","atan","quarterPi","sin","tan","timesRaw","lambda","phi","t","s","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,IAAR,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAwC,WAAxC;AAEA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B;AACpC,MAAIC,CAAC,GAAGJ,GAAG,CAACG,GAAG,GAAG,CAAP,CAAX;AAAA,MACIE,CAAC,GAAGN,GAAG,CAACD,SAAS,GAAGM,CAAb,CADX;AAEA,SAAO,CACLF,MAAM,IAAI,UAAU,UAAUG,CAAV,GAAcA,CAA5B,CADD,EAEL,UAAUD,CAFL,CAAP;AAID;;AAEDH,QAAQ,CAACK,MAAT,GAAkB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/B,MAAIJ,CAAC,GAAGI,CAAC,GAAG,OAAZ;AAAA,MACIH,CAAC,GAAGN,GAAG,CAACD,SAAS,GAAGM,CAAb,CADX;AAEA,SAAO,CACLG,CAAC,IAAI,UAAU,UAAUF,CAAV,GAAcA,CAA5B,CADI,EAEL,IAAIR,IAAI,CAACO,CAAD,CAFH,CAAP;AAID,CAPD;;AASA,eAAe,YAAW;AACxB,SAAOR,UAAU,CAACK,QAAD,CAAV,CACFQ,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\r\nimport {atan, quarterPi, sin, tan} from \"./math.js\";\r\n\r\nexport function timesRaw(lambda, phi) {\r\n  var t = tan(phi / 2),\r\n      s = sin(quarterPi * t);\r\n  return [\r\n    lambda * (0.74482 - 0.34588 * s * s),\r\n    1.70711 * t\r\n  ];\r\n}\r\n\r\ntimesRaw.invert = function(x, y) {\r\n  var t = y / 1.70711,\r\n      s = sin(quarterPi * t);\r\n  return [\r\n    x / (0.74482 - 0.34588 * s * s),\r\n    2 * atan(t)\r\n  ];\r\n};\r\n\r\nexport default function() {\r\n  return projection(timesRaw)\r\n      .scale(146.153);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}