{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { atan2, cos, halfPi, sin, sqrt } from \"./math.js\";\nexport function bottomleyRaw(sinPsi) {\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function (x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\nexport default function () {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function (_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p.scale(158.837);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/bottomley.js"],"names":["geoProjectionMutator","projectionMutator","atan2","cos","halfPi","sin","sqrt","bottomleyRaw","sinPsi","forward","lambda","phi","rho","eta","invert","x","y","x1","y1","m","p","fraction","_","arguments","length","scale"],"mappings":"AAAA,SAAQA,oBAAoB,IAAIC,iBAAhC,QAAwD,QAAxD;AACA,SAAQC,KAAR,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA4C,WAA5C;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAEnC,WAASC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,GAAG,GAAGR,MAAM,GAAGO,GAAnB;AAAA,QACIE,GAAG,GAAGD,GAAG,GAAGF,MAAM,GAAGF,MAAT,GAAkBH,GAAG,CAACO,GAAD,CAArB,GAA6BA,GAAhC,GAAsCA,GADnD;AAEA,WAAO,CAACA,GAAG,GAAGP,GAAG,CAACQ,GAAD,CAAT,GAAiBL,MAAlB,EAA0BJ,MAAM,GAAGQ,GAAG,GAAGT,GAAG,CAACU,GAAD,CAA5C,CAAP;AACD;;AAEDJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIC,EAAE,GAAGF,CAAC,GAAGP,MAAb;AAAA,QACIU,EAAE,GAAGd,MAAM,GAAGY,CADlB;AAAA,QAEIJ,GAAG,GAAGN,IAAI,CAACW,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAhB,CAFd;AAAA,QAGIL,GAAG,GAAGX,KAAK,CAACe,EAAD,EAAKC,EAAL,CAHf;AAIA,WAAO,CAAC,CAACN,GAAG,GAAGA,GAAG,GAAGP,GAAG,CAACO,GAAD,CAAZ,GAAoB,CAAxB,IAA6BC,GAA7B,GAAmCL,MAApC,EAA4CJ,MAAM,GAAGQ,GAArD,CAAP;AACD,GAND;;AAQA,SAAOH,OAAP;AACD;AAED,eAAe,YAAW;AACxB,MAAID,MAAM,GAAG,GAAb;AAAA,MACIW,CAAC,GAAGlB,iBAAiB,CAACM,YAAD,CADzB;AAAA,MAEIa,CAAC,GAAGD,CAAC,CAACX,MAAD,CAFT;;AAIAY,EAAAA,CAAC,CAACC,QAAF,GAAa,UAASC,CAAT,EAAY;AACvB,WAAOC,SAAS,CAACC,MAAV,GAAmBL,CAAC,CAACX,MAAM,GAAG,CAACc,CAAX,CAApB,GAAoCd,MAA3C;AACD,GAFD;;AAIA,SAAOY,CAAC,CACHK,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\r\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\r\n\r\nexport function bottomleyRaw(sinPsi) {\r\n\r\n  function forward(lambda, phi) {\r\n    var rho = halfPi - phi,\r\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\r\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\r\n  }\r\n\r\n  forward.invert = function(x, y) {\r\n    var x1 = x * sinPsi,\r\n        y1 = halfPi - y,\r\n        rho = sqrt(x1 * x1 + y1 * y1),\r\n        eta = atan2(x1, y1);\r\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\nexport default function() {\r\n  var sinPsi = 0.5,\r\n      m = projectionMutator(bottomleyRaw),\r\n      p = m(sinPsi);\r\n\r\n  p.fraction = function(_) {\r\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\r\n  };\r\n\r\n  return p\r\n      .scale(158.837);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}