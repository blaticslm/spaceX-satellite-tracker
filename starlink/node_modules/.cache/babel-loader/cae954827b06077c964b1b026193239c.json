{"ast":null,"code":"import { asin, atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function (x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function (x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n  return forward;\n}\nexport default function () {\n  return parallel1(craigRaw).scale(249.828).clipAngle(90);\n}","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/craig.js"],"names":["asin","atan2","cos","sin","sqrt","tan","parallel1","craigRaw","phi0","tanPhi0","forward","lambda","phi","invert","x","y","cosLambda","scale","clipAngle"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,QAA+C,WAA/C;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,MAAIC,OAAO,GAAGJ,GAAG,CAACG,IAAD,CAAjB;;AAEA,WAASE,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,WAAO,CAACD,MAAD,EAAS,CAACA,MAAM,GAAGA,MAAM,GAAGR,GAAG,CAACQ,MAAD,CAAf,GAA0B,CAAjC,KAAuCR,GAAG,CAACS,GAAD,CAAH,GAAWV,GAAG,CAACS,MAAD,CAAd,GAAyBF,OAAO,GAAGP,GAAG,CAACU,GAAD,CAA7E,CAAT,CAAP;AACD;;AAEDF,EAAAA,OAAO,CAACG,MAAR,GAAiBJ,OAAO,GAAG,UAASK,CAAT,EAAYC,CAAZ,EAAe;AACxC,QAAID,CAAJ,EAAOC,CAAC,IAAIZ,GAAG,CAACW,CAAD,CAAH,GAASA,CAAd;AACP,QAAIE,SAAS,GAAGd,GAAG,CAACY,CAAD,CAAnB;AACA,WAAO,CAACA,CAAD,EAAI,IAAIb,KAAK,CAACG,IAAI,CAACY,SAAS,GAAGA,SAAZ,GAAwBP,OAAO,GAAGA,OAAlC,GAA4CM,CAAC,GAAGA,CAAjD,CAAJ,GAA0DC,SAA3D,EAAsEP,OAAO,GAAGM,CAAhF,CAAb,CAAP;AACD,GAJuB,GAIpB,UAASD,CAAT,EAAYC,CAAZ,EAAe;AACjB,WAAO,CAACD,CAAD,EAAId,IAAI,CAACc,CAAC,GAAGC,CAAC,GAAGV,GAAG,CAACS,CAAD,CAAP,GAAaA,CAAhB,GAAoBC,CAAtB,CAAR,CAAP;AACD,GAND;AAQA,SAAOL,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOJ,SAAS,CAACC,QAAD,CAAT,CACFU,KADE,CACI,OADJ,EAEFC,SAFE,CAEQ,EAFR,CAAP;AAGD","sourcesContent":["import {asin, atan2, cos, sin, sqrt, tan} from \"./math.js\";\r\nimport parallel1 from \"./parallel1.js\";\r\n\r\nexport function craigRaw(phi0) {\r\n  var tanPhi0 = tan(phi0);\r\n\r\n  function forward(lambda, phi) {\r\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\r\n  }\r\n\r\n  forward.invert = tanPhi0 ? function(x, y) {\r\n    if (x) y *= sin(x) / x;\r\n    var cosLambda = cos(x);\r\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\r\n  } : function(x, y) {\r\n    return [x, asin(x ? y * tan(x) / x : y)];\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\nexport default function() {\r\n  return parallel1(craigRaw)\r\n      .scale(249.828)\r\n      .clipAngle(90);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}