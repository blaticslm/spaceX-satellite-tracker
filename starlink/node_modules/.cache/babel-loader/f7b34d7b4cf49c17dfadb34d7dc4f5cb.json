{"ast":null,"code":"import { geoStream } from \"d3-geo\";\nimport noop from \"../noop.js\";\nimport clockwise from \"./clockwise.js\";\nimport contains from \"./contains.js\";\nexport default function (object, projection) {\n  var stream = projection.stream,\n      project;\n  if (!stream) throw new Error(\"invalid projection\");\n\n  switch (object && object.type) {\n    case \"Feature\":\n      project = projectFeature;\n      break;\n\n    case \"FeatureCollection\":\n      project = projectFeatureCollection;\n      break;\n\n    default:\n      project = projectGeometry;\n      break;\n  }\n\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function (f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function (o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n\n  switch (o.type) {\n    case \"Point\":\n      sink = sinkPoint;\n      break;\n\n    case \"MultiPoint\":\n      sink = sinkPoint;\n      break;\n\n    case \"LineString\":\n      sink = sinkLine;\n      break;\n\n    case \"MultiLineString\":\n      sink = sinkLine;\n      break;\n\n    case \"Polygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"MultiPolygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"Sphere\":\n      sink = sinkPolygon;\n      break;\n\n    default:\n      return null;\n  }\n\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\nvar sinkPoint = {\n  point: function (x, y) {\n    points.push([x, y]);\n  },\n  result: function () {\n    var result = !points.length ? null : points.length < 2 ? {\n      type: \"Point\",\n      coordinates: points[0]\n    } : {\n      type: \"MultiPoint\",\n      coordinates: points\n    };\n    points = [];\n    return result;\n  }\n};\nvar sinkLine = {\n  lineStart: noop,\n  point: function (x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function () {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function () {\n    var result = !lines.length ? null : lines.length < 2 ? {\n      type: \"LineString\",\n      coordinates: lines[0]\n    } : {\n      type: \"MultiLineString\",\n      coordinates: lines\n    };\n    lines = [];\n    return result;\n  }\n};\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function (x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function () {\n    var n = points.length;\n\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function () {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = []; // https://github.com/d3/d3/issues/1558\n\n    lines.forEach(function (ring) {\n      if (clockwise(ring)) polygons.push([ring]);else holes.push(ring);\n    });\n    holes.forEach(function (hole) {\n      var point = hole[0];\n      polygons.some(function (polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n    lines = [];\n    return !polygons.length ? null : polygons.length > 1 ? {\n      type: \"MultiPolygon\",\n      coordinates: polygons\n    } : {\n      type: \"Polygon\",\n      coordinates: polygons[0]\n    };\n  }\n};","map":{"version":3,"sources":["E:/Studying Document drive/laioffer/FullStack/SpaceX项目/spaceX-satellite-tracker/starlink/node_modules/d3-geo-projection/src/project/index.js"],"names":["geoStream","noop","clockwise","contains","object","projection","stream","project","Error","type","projectFeature","projectFeatureCollection","projectGeometry","o","features","map","f","id","properties","geometry","projectGeometryCollection","geometries","sink","sinkPoint","sinkLine","sinkPolygon","result","points","lines","point","x","y","push","length","coordinates","lineStart","lineEnd","polygonStart","n","slice","polygonEnd","polygons","holes","forEach","ring","hole","some","polygon"],"mappings":"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","sourcesContent":["import {geoStream} from \"d3-geo\";\r\nimport noop from \"../noop.js\";\r\nimport clockwise from \"./clockwise.js\";\r\nimport contains from \"./contains.js\";\r\n\r\nexport default function(object, projection) {\r\n  var stream = projection.stream, project;\r\n  if (!stream) throw new Error(\"invalid projection\");\r\n  switch (object && object.type) {\r\n    case \"Feature\": project = projectFeature; break;\r\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\r\n    default: project = projectGeometry; break;\r\n  }\r\n  return project(object, stream);\r\n}\r\n\r\nfunction projectFeatureCollection(o, stream) {\r\n  return {\r\n    type: \"FeatureCollection\",\r\n    features: o.features.map(function(f) {\r\n      return projectFeature(f, stream);\r\n    })\r\n  };\r\n}\r\n\r\nfunction projectFeature(o, stream) {\r\n  return {\r\n    type: \"Feature\",\r\n    id: o.id,\r\n    properties: o.properties,\r\n    geometry: projectGeometry(o.geometry, stream)\r\n  };\r\n}\r\n\r\nfunction projectGeometryCollection(o, stream) {\r\n  return {\r\n    type: \"GeometryCollection\",\r\n    geometries: o.geometries.map(function(o) {\r\n      return projectGeometry(o, stream);\r\n    })\r\n  };\r\n}\r\n\r\nfunction projectGeometry(o, stream) {\r\n  if (!o) return null;\r\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\r\n  var sink;\r\n  switch (o.type) {\r\n    case \"Point\": sink = sinkPoint; break;\r\n    case \"MultiPoint\": sink = sinkPoint; break;\r\n    case \"LineString\": sink = sinkLine; break;\r\n    case \"MultiLineString\": sink = sinkLine; break;\r\n    case \"Polygon\": sink = sinkPolygon; break;\r\n    case \"MultiPolygon\": sink = sinkPolygon; break;\r\n    case \"Sphere\": sink = sinkPolygon; break;\r\n    default: return null;\r\n  }\r\n  geoStream(o, stream(sink));\r\n  return sink.result();\r\n}\r\n\r\nvar points = [],\r\n    lines = [];\r\n\r\nvar sinkPoint = {\r\n  point: function(x, y) {\r\n    points.push([x, y]);\r\n  },\r\n  result: function() {\r\n    var result = !points.length ? null\r\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\r\n        : {type: \"MultiPoint\", coordinates: points};\r\n    points = [];\r\n    return result;\r\n  }\r\n};\r\n\r\nvar sinkLine = {\r\n  lineStart: noop,\r\n  point: function(x, y) {\r\n    points.push([x, y]);\r\n  },\r\n  lineEnd: function() {\r\n    if (points.length) lines.push(points), points = [];\r\n  },\r\n  result: function() {\r\n    var result = !lines.length ? null\r\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\r\n        : {type: \"MultiLineString\", coordinates: lines};\r\n    lines = [];\r\n    return result;\r\n  }\r\n};\r\n\r\nvar sinkPolygon = {\r\n  polygonStart: noop,\r\n  lineStart: noop,\r\n  point: function(x, y) {\r\n    points.push([x, y]);\r\n  },\r\n  lineEnd: function() {\r\n    var n = points.length;\r\n    if (n) {\r\n      do points.push(points[0].slice()); while (++n < 4);\r\n      lines.push(points), points = [];\r\n    }\r\n  },\r\n  polygonEnd: noop,\r\n  result: function() {\r\n    if (!lines.length) return null;\r\n    var polygons = [],\r\n        holes = [];\r\n\r\n    // https://github.com/d3/d3/issues/1558\r\n    lines.forEach(function(ring) {\r\n      if (clockwise(ring)) polygons.push([ring]);\r\n      else holes.push(ring);\r\n    });\r\n\r\n    holes.forEach(function(hole) {\r\n      var point = hole[0];\r\n      polygons.some(function(polygon) {\r\n        if (contains(polygon[0], point)) {\r\n          polygon.push(hole);\r\n          return true;\r\n        }\r\n      }) || polygons.push([hole]);\r\n    });\r\n\r\n    lines = [];\r\n\r\n    return !polygons.length ? null\r\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\r\n        : {type: \"Polygon\", coordinates: polygons[0]};\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}